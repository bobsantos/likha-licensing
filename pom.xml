<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>app.likha</groupId>
    <artifactId>licensing-platform-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    
    <name>Likha Licensing Platform</name>
    <description>Enterprise licensing software platform - Parent POM</description>
    
    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>21</java.version>
        <spring.boot.version>3.5.4</spring.boot.version>
        <spring-modulith.version>1.2.6</spring-modulith.version>
        <frontend.skip>false</frontend.skip>
        
        <!-- Database connection defaults for local development -->
        <postgres.host>${env.POSTGRES_HOST}</postgres.host>
        <postgres.port>${env.POSTGRES_PORT}</postgres.port>
        <postgres.db>${env.POSTGRES_DB}</postgres.db>
        <postgres.user>${env.POSTGRES_USER}</postgres.user>
        <postgres.password>${env.POSTGRES_PASSWORD}</postgres.password>
        
    </properties>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.modulith</groupId>
                <artifactId>spring-modulith-bom</artifactId>
                <version>${spring-modulith.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- PostgreSQL JDBC Driver for Flyway -->
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.7.7</version>
            </dependency>
            <!-- Flyway Core for database migrations -->
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>9.22.3</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <modules>
        <module>backend</module>
    </modules>
    
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring.boot.version}</version>
                </plugin>
                <!-- Maven Compiler Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <compilerArgs>
                            <arg>-parameters</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                
                <!-- Maven Surefire Plugin (Unit Tests) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.1.2</version>
                    <configuration>
                        <includes>
                            <include>**/*Test.java</include>
                            <include>**/*Tests.java</include>
                        </includes>
                        <excludes>
                            <exclude>**/*IT.java</exclude>
                            <exclude>**/*IntegrationTest.java</exclude>
                        </excludes>
                        <argLine>${surefireArgLine}</argLine>
                    </configuration>
                </plugin>
                
                <!-- Maven Failsafe Plugin (Integration Tests) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>3.1.2</version>
                    <configuration>
                        <includes>
                            <include>**/*IT.java</include>
                            <include>**/*IntegrationTest.java</include>
                        </includes>
                        <argLine>${failsafeArgLine}</argLine>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                
                <!-- Flyway Database Migration Plugin -->
                <plugin>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-maven-plugin</artifactId>
                    <version>9.22.3</version>
                    <configuration>
                        <!-- Default configuration for local development -->
                        <url>jdbc:postgresql://localhost:5432/likha_licensing</url>
                        <user>postgres</user>
                        <password>postgres</password>
                        <locations>
                            <location>classpath:db/migration</location>
                        </locations>
                        <baselineOnMigrate>true</baselineOnMigrate>
                        <validateOnMigrate>true</validateOnMigrate>
                        <cleanDisabled>true</cleanDisabled>
                        <schemas>
                            <schema>public</schema>
                        </schemas>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.postgresql</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>42.7.7</version>
                        </dependency>
                    </dependencies>
                </plugin>
                
            </plugins>
        </pluginManagement>
        
        <plugins>
            <!-- JaCoCo Code Coverage Plugin -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.11</version>
                <executions>
                    <!-- Prepare agent for unit tests -->
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!-- Prepare agent for integration tests -->
                    <execution>
                        <id>prepare-agent-integration</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <propertyName>failsafeArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!-- Generate coverage report after tests run -->
                    <execution>
                        <id>default-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!-- Check coverage thresholds -->
                    <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- Exclude configuration and generated files from coverage -->
                    <excludes>
                        <exclude>**/config/**</exclude>
                        <exclude>**/dto/**</exclude>
                        <exclude>**/entity/**</exclude>
                        <exclude>**/LicensingPlatformApplication.class</exclude>
                        <exclude>**/*Config.class</exclude>
                        <exclude>**/*Configuration.class</exclude>
                    </excludes>
                    <!-- Coverage rules for jacoco:check goal -->
                    <rules>
                        <rule>
                            <element>BUNDLE</element>
                            <limits>
                                <limit>
                                    <counter>INSTRUCTION</counter>
                                    <value>COVEREDRATIO</value>
                                    <minimum>0.70</minimum>
                                </limit>
                                <limit>
                                    <counter>BRANCH</counter>
                                    <value>COVEREDRATIO</value>
                                    <minimum>0.60</minimum>
                                </limit>
                            </limits>
                        </rule>
                    </rules>
                </configuration>
            </plugin>
        
            <!-- Enforce Prerequisites -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven-version</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.8.1,)</version>
                                    <message>Maven 3.8.1 or higher is required.</message>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>[21,)</version>
                                    <message>Java 21 or higher is required.</message>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                    <execution>
                        <id>validate-root-structure</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireFilesExist>
                                    <files>
                                        <file>backend/pom.xml</file>
                                    </files>
                                    <message>Backend module not found. Expected: backend/pom.xml</message>
                                </requireFilesExist>
                            </rules>
                        </configuration>
                        <inherited>false</inherited>
                    </execution>
                    <execution>
                        <id>validate-frontend-structure</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <skip>${frontend.skip}</skip>
                            <rules>
                                <requireFilesExist>
                                    <files>
                                        <file>frontend</file>
                                        <file>frontend/package.json</file>
                                    </files>
                                    <message>ERROR: Frontend directory structure is invalid!

Required files:
- frontend/ (directory)
- frontend/package.json (file)

Solutions:
1. To skip frontend build: mvn clean package -Dfrontend.skip=true
2. To set up frontend: cd frontend and run npm install
3. Check project structure matches the expected layout</message>
                                </requireFilesExist>
                            </rules>
                        </configuration>
                        <inherited>false</inherited>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        <!-- Development Profile -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
        </profile>
        
        <!-- Production Profile -->
        <profile>
            <id>prod</id>
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
                <frontend.skip>false</frontend.skip>
            </properties>
        </profile>
        
        <!-- Backend Only Profile -->
        <profile>
            <id>backend-only</id>
            <properties>
                <frontend.skip>true</frontend.skip>
            </properties>
        </profile>
        
        <!-- CI/CD Profile -->
        <profile>
            <id>ci</id>
            <properties>
                <frontend.skip>false</frontend.skip>
            </properties>
        </profile>
        
        <!-- IDE Development Profile (skips frontend for IDE compatibility) -->
        <profile>
            <id>ide</id>
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <properties>
                <frontend.skip>true</frontend.skip>
            </properties>
        </profile>
    </profiles>
</project>