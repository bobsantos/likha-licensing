name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      skip_owasp:
        description: 'Skip OWASP dependency check'
        required: false
        default: false
        type: boolean
      force_full_scan:
        description: 'Force full OWASP scan (ignore cache)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'

jobs:
  # Static Code Analysis
  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SpotBugs analysis
        run: |
          mvn clean compile spotbugs:check -Dfrontend.skip=true
        continue-on-error: true

      - name: Run Checkstyle
        run: |
          mvn checkstyle:check -Dfrontend.skip=true
        continue-on-error: true

      - name: Upload SpotBugs results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spotbugs-report
          path: backend/target/spotbugsXml.xml

  # Security Vulnerability Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Optimized OWASP NVD Data Caching Strategy
      - name: Cache OWASP NVD Database
        if: ${{ github.event.inputs.skip_owasp != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository/org/owasp/dependency-check-data
            backend/target/dependency-check-data
          key: ${{ github.event.inputs.force_full_scan == 'true' && format('{0}-owasp-nvd-force-{1}', runner.os, github.run_number) || format('{0}-owasp-nvd-{1}-{2}', runner.os, hashFiles('backend/pom.xml'), github.run_number) }}
          restore-keys: |
            ${{ runner.os }}-owasp-nvd-${{ hashFiles('backend/pom.xml') }}-
            ${{ runner.os }}-owasp-nvd-

      # Performance monitoring start
      - name: Record OWASP scan start time
        if: ${{ github.event.inputs.skip_owasp != 'true' }}
        run: |
          echo "OWASP_START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "Starting OWASP dependency check at $(date)"

      - name: Run OWASP Dependency Check (Backend) - Attempt 1
        if: ${{ github.event.inputs.skip_owasp != 'true' }}
        id: owasp_attempt_1
        run: |
          echo "Running consolidated OWASP dependency vulnerability scan (Attempt 1)..."
          echo "Using enhanced timeout and retry settings to handle NVD API issues"
          mvn dependency-check:check -Dfrontend.skip=true -DnvdApiKey="$NVD_API_KEY" -DnvdApiDelay=16000 -DnvdValidForHours=24 -DnvdMaxRetryCount=5
        continue-on-error: true
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - name: Run OWASP Dependency Check (Backend) - Fallback without API Key
        if: ${{ github.event.inputs.skip_owasp != 'true' && steps.owasp_attempt_1.outcome == 'failure' }}
        id: owasp_fallback
        run: |
          echo "OWASP scan with API key failed. Attempting fallback scan without API key..."
          echo "Note: This will use local NVD database and may be slower but more reliable"
          mvn dependency-check:check -Dfrontend.skip=true -DnvdApiDelay=20000 -DnvdValidForHours=24
        continue-on-error: true

      - name: Check OWASP Results and Generate Summary
        if: ${{ github.event.inputs.skip_owasp != 'true' }}
        run: |
          if [ "${{ steps.owasp_attempt_1.outcome }}" == "success" ]; then
            echo "✅ OWASP scan completed successfully with API key"
            echo "OWASP_STATUS=success_with_api" >> $GITHUB_ENV
          elif [ "${{ steps.owasp_fallback.outcome }}" == "success" ]; then
            echo "⚠️  OWASP scan completed using fallback method (without API key)"
            echo "OWASP_STATUS=success_fallback" >> $GITHUB_ENV
          else
            echo "❌ OWASP scan failed with both API key and fallback methods"
            echo "OWASP_STATUS=failed" >> $GITHUB_ENV
          fi

      # Performance monitoring end
      - name: Calculate OWASP scan duration
        if: ${{ always() && github.event.inputs.skip_owasp != 'true' }}
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - OWASP_START_TIME))
          echo "OWASP scan completed in ${DURATION} seconds"
          echo "OWASP_DURATION=${DURATION}" >> $GITHUB_ENV
          
          # Create performance report
          cat > owasp-performance.md << EOF
          ## OWASP Performance Metrics
          
          - **Scan Duration**: ${DURATION} seconds
          - **Scan Status**: ${OWASP_STATUS:-unknown}
          - **Cache Status**: $([ -d ~/.m2/repository/org/owasp/dependency-check-data ] && echo "Cache Hit" || echo "Cache Miss")
          - **Timestamp**: $(date)
          - **Runner**: ${{ runner.os }}
          - **Force Full Scan**: ${{ github.event.inputs.force_full_scan == 'true' && 'Yes' || 'No' }}
          - **Workflow Trigger**: ${{ github.event_name }}
          - **NVD API Key Used**: $([ -n "${{ secrets.NVD_API_KEY }}" ] && echo "Yes" || echo "No")
          
          ### Troubleshooting Notes
          - If API method failed: NVD service may be experiencing issues
          - Fallback method uses local database and longer delays
          - Check GitHub Secrets for valid NVD_API_KEY if API method fails consistently
          EOF

      # Skip message when OWASP is disabled
      - name: Create OWASP skip report
        if: ${{ github.event.inputs.skip_owasp == 'true' }}
        run: |
          cat > owasp-performance.md << EOF
          ## OWASP Performance Metrics
          
          - **Status**: SKIPPED (Manual override)
          - **Timestamp**: $(date)
          - **Runner**: ${{ runner.os }}
          - **Workflow Trigger**: ${{ github.event_name }}
          EOF

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run npm audit (Frontend)
        run: |
          npm audit --audit-level=high --json > npm-audit-report.json || true
        working-directory: frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # Don't fail the step on vulnerabilities
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Verify filesystem SARIF file exists
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "Filesystem SARIF file created successfully"
            echo "File size: $(wc -c < trivy-results.sarif) bytes"
          else
            echo "Filesystem SARIF file not found, creating empty SARIF template"
            cat > trivy-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "version": "N/A"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'filesystem-security'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            backend/target/dependency-check-report.html
            frontend/npm-audit-report.json
            trivy-results.sarif
            owasp-performance.md

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: likha-licensing:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'likha-licensing:scan'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          exit-code: '0'  # Don't fail the step on vulnerabilities
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Verify SARIF file exists
        run: |
          if [ -f "trivy-image-results.sarif" ]; then
            echo "SARIF file created successfully"
            echo "File size: $(wc -c < trivy-image-results.sarif) bytes"
            echo "SARIF_EXISTS=true" >> $GITHUB_ENV
          else
            echo "SARIF file not found, creating empty SARIF template"
            cat > trivy-image-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "version": "N/A"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
            echo "SARIF_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'container-security'

      - name: Upload container security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-image-results.sarif

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Check Maven licenses
        run: |
          mvn license:check -Dfrontend.skip=true
        continue-on-error: true

      - name: Install license-checker for Node.js
        run: npm install -g license-checker

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Check frontend licenses
        run: |
          license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0" --production
        working-directory: frontend
        continue-on-error: true

  # Test Coverage Analysis (TDD Approach)
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: likha_licensing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests with coverage
        run: |
          mvn clean test jacoco:report -Pci -Dfrontend.skip=true
        env:
          SPRING_PROFILES_ACTIVE: ci
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: likha_licensing
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Run integration tests with coverage
        run: |
          mvn verify jacoco:report-aggregate -Pci -Dfrontend.skip=true
        env:
          SPRING_PROFILES_ACTIVE: ci
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: likha_licensing
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Generate coverage report summary
        run: |
          mvn jacoco:report -Dfrontend.skip=true
          echo "## Test Coverage Summary" > coverage-summary.md
          echo "" >> coverage-summary.md
          if [ -f "backend/target/site/jacoco/index.html" ]; then
            echo "Coverage report generated successfully" >> coverage-summary.md
            echo "- Coverage reports available in artifacts" >> coverage-summary.md
          else
            echo "Warning: Coverage report not found" >> coverage-summary.md
          fi

      - name: Enforce coverage thresholds
        run: |
          mvn jacoco:check -Dfrontend.skip=true
        continue-on-error: false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jacoco-coverage-report
          path: |
            backend/target/site/jacoco/
            backend/target/jacoco.exec
            coverage-summary.md
          retention-days: 30

  # Performance Analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend for analysis
        run: npm run build
        working-directory: frontend

      - name: Analyze bundle size
        run: |
          npx bundlesize --config .bundlesize.json || echo "Bundle size check completed"
        working-directory: frontend
        continue-on-error: true

      - name: Run JMH benchmarks (if available)
        run: |
          if mvn dependency:resolve | grep -q "jmh"; then
            mvn exec:java -Dexec.mainClass="org.openjdk.jmh.Main" -Dfrontend.skip=true
          else
            echo "No JMH benchmarks found"
          fi
        continue-on-error: true

  # Workflow Summary and Resource Optimization Report
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [code-analysis, security-scan, container-security, license-check, coverage, performance]
    if: always()

    steps:
      - name: Generate workflow summary
        run: |
          cat > workflow-summary.md << EOF
          # Code Quality Workflow Summary
          
          ## Job Results
          - **Code Analysis**: ${{ needs.code-analysis.result }}
          - **Security Scan**: ${{ needs.security-scan.result }}
          - **Container Security**: ${{ needs.container-security.result }}
          - **License Check**: ${{ needs.license-check.result }}
          - **Coverage**: ${{ needs.coverage.result }}
          - **Performance**: ${{ needs.performance.result }}
          
          ## Workflow Metadata
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Runner**: ${{ runner.os }}
          - **Workflow Run**: #${{ github.run_number }}
          
          ## Infrastructure Optimizations Applied
          - Consolidated OWASP scans to code-quality workflow only
          - Optimized NVD database caching strategy
          - Added conditional execution for resource management
          - Implemented performance monitoring and timing
          - Enhanced parallel job execution
          
          EOF
          
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          cat workflow-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload workflow summary
        uses: actions/upload-artifact@v4
        with:
          name: workflow-summary
          path: workflow-summary.md