name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'

jobs:
  # Static Code Analysis
  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SpotBugs analysis
        run: |
          mvn clean compile spotbugs:check -Dfrontend.skip=true
        continue-on-error: true

      - name: Run Checkstyle
        run: |
          mvn checkstyle:check -Dfrontend.skip=true
        continue-on-error: true

      - name: Upload SpotBugs results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spotbugs-report
          path: backend/target/spotbugsXml.xml

  # Security Vulnerability Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Run OWASP Dependency Check (Backend)
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -Dfrontend.skip=true \
            -DsuppressionsLocation=.github/dependency-check-suppressions.xml
        continue-on-error: true

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run npm audit (Frontend)
        run: |
          npm audit --audit-level=high --json > npm-audit-report.json || true
        working-directory: frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # Don't fail the step on vulnerabilities
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Verify filesystem SARIF file exists
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "Filesystem SARIF file created successfully"
            echo "File size: $(wc -c < trivy-results.sarif) bytes"
          else
            echo "Filesystem SARIF file not found, creating empty SARIF template"
            cat > trivy-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "version": "N/A"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'filesystem-security'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            backend/target/dependency-check-report.html
            frontend/npm-audit-report.json
            trivy-results.sarif

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: likha-licensing:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Debug working directory before Trivy scan
        run: |
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Docker images:"
          docker images

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'likha-licensing:scan'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          exit-code: '0'  # Don't fail the step on vulnerabilities
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Debug working directory after Trivy scan
        run: |
          echo "Working directory after scan: $(pwd)"
          echo "Directory contents after scan:"
          ls -la
          echo "Checking for SARIF files:"
          find . -name "*.sarif" -type f 2>/dev/null || echo "No SARIF files found"

      - name: Verify SARIF file exists
        run: |
          if [ -f "trivy-image-results.sarif" ]; then
            echo "SARIF file created successfully"
            echo "File size: $(wc -c < trivy-image-results.sarif) bytes"
            echo "SARIF_EXISTS=true" >> $GITHUB_ENV
          else
            echo "SARIF file not found, creating empty SARIF template"
            cat > trivy-image-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "version": "N/A"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
            echo "SARIF_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'container-security'

      - name: Upload container security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-image-results.sarif

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Check Maven licenses
        run: |
          mvn license:check -Dfrontend.skip=true
        continue-on-error: true

      - name: Install license-checker for Node.js
        run: npm install -g license-checker

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Check frontend licenses
        run: |
          license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0" --production
        working-directory: frontend
        continue-on-error: true

  # Code Coverage Analysis
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run tests with coverage
        run: |
          mvn clean verify jacoco:report -Pci -Dfrontend.skip=true
        env:
          SPRING_PROFILES_ACTIVE: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Performance Analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend for analysis
        run: npm run build
        working-directory: frontend

      - name: Analyze bundle size
        run: |
          npx bundlesize --config .bundlesize.json || echo "Bundle size check completed"
        working-directory: frontend
        continue-on-error: true

      - name: Run JMH benchmarks (if available)
        run: |
          if mvn dependency:resolve | grep -q "jmh"; then
            mvn exec:java -Dexec.mainClass="org.openjdk.jmh.Main" -Dfrontend.skip=true
          else
            echo "No JMH benchmarks found"
          fi
        continue-on-error: true